    <!-- Please follow semantic linefeeds in the text.
    http://rhodesmill.org/brandon/2012/one-sentence-per-line/ -->
    <div class="quest">
        <h1>What is Crypton?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/digger.jpg" alt="Digger Construction" />
            </div>
            <div class="qtext">
                <p>
                    Crypton is a framework for building 
                    cryptographically secure cloud applications.
                    Such applications offer meaningful privacy assurance to end users because
                    the servers running the application cannot read the data 
                    created and stored by the application.
                </p>
                <p>
                    Using Crypton, developers can for the first time easily build feature rich
                    multi user collaborative applications that offer total privacy and security
                    "out of the box." 
                    Crypton transparently does all the hard parts of cryptography behind the scenes.  
                    This allows developers to focus on domain specific challenges.
                </p>
            </div>
        </div>
    </div>

    <div class="quest">
        <h1>How does this change the landscape?</h1>
        <div class="qbod">
            <div class="qside">
            </div>
            <div class="qtext">
                <p>
                    Users will no longer have to chose between the convenience of 
                    the cloud applications and protecting their privacy.
                </p>
                <p>
                    Today there are few choices for effectively encrypted cloud storage.  There
                    are even fewer choices for feature rich and collaborative encrypted cloud
                    apps.  In the future there will be applications like Evernote, Basecamp,
                    Freshbooks, Google Docs and many others with meaningful guarantees
                    about your privacy.
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>Who is it for?</h1>
        <div class="qbod">
            <div class="qside">
            </div>
            <div class="qtext">
                <p>
                    Crypton is for developers who want to build privacy into their apps.
                </p>
                <p>
                    Crypton allows developers to provide customers a truly private storage
                    and collaboration environment with no access to unencrypted customer data,
                    without having to rely on 3rd party security layers or post development
                    hacks.
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>Why is it interesting?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/aware.jpg" alt="Crazy Eddie" />
            </div>
            <div class="qtext">
                <p>
                    More people are becoming "privacy aware."  
                    Enterprises refuse to adopt solutions where the developer and service 
                    provider can access critical internal data.  
                    Crypton is the first application framework that provides a foundation 
                    for building zero-knowledge cloud products.
                </p>
                <p>
                    With Crypton you can develop privacy preserving applications 
                    aimed at the already large and growing audience of 'privacy aware' customers 
                    without the added burdens of writing cryptography, scaling databases, 
                    or matching a cloud API with 3rd party security solutions.
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>Has this been done before?</h1>
        <div class="qbod">
            <div class="qside">
            </div>
            <div class="qtext">
                <p>
                    To our knowledge there is no existing framework that handles all the 
                    encryption, database storage, and private user to user communication 
                    needed to build a zero knowledge cloud application.
                </p>
                <p>
                    Other cloud applications have been created that involve cryptography, 
                    but not in a generalized, reusable form that everyday developers 
                    could easily use to build a wide range of new apps.
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>What types of applications should be built with Crypton?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/creative.jpg" alt="A camera, paint, and edited paper" />
            </div>
            <div class="qtext">
                <p>
                    The most appropriate applications are those 
                    with significant personal user generated content.
                </p>

                <p>
                    For example 
                    <a href="http://37signals.com/">37signals</a> 
                    <a href="http://basecamp.com/">Basecamp</a>, 
                    a collaborative time and project management application, 
                    would be a good candidate.  
                    Basecamp is an interface for organizing TODOs, tracking your time, 
                    collecting documents, assets, time lines, calendars, and general 
                    communication among a group of people working on a specific project.  
                    All of the "data" that goes into the application is provided by the users.
                    The software itself is data generic&mdash;it 
                    can work with any combination of documents, calendar events, 
                    and so on.
                </p>

                <p>
                    In general, you can think of the most successful applications 
                    across many categories, and ask yourself if the market has room 
                    for a competitor with meaningful end user privacy assurance.  
                    How about Evernote with truly private notes that you could 
                    privately share with just the people you chose?  
                    RescueTime?  Hipchat?  Skype?  Firebase?  Flickr?  Google Docs?  
                    FreshBooks?
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>What types of applications wouldn't work well with Crypton?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/bubble.jpg" alt="Multiple choice" />
            </div>
            <div class="qtext">
                <p>
                    It wouldn't make much sense to build Netflix or Amazon with Crypton.
                    That's true for "multiple choice" apps in general.  
                    There's no opportunity for user data to be secret from the server.  
                    All the "data" in the system is essentially data created by the server 
                    &mdash; the directory of products and movies and shows available, 
                    and the browsing history of individual users.  

                    The server necessarily knows which movies each user watches on Netflix, 
                    and which products they buy on Amazon.  

                    In both cases, the recommendation system is improved by direct 
                    calculations made from visible user history.
                    The developers directly profit from visibility into this user data.
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>Why should application developers care about end users' privacy?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/market.jpg" alt="Mega brand vs crypton stop" />
            </div>
            <div class="qtext">
                <p>
                    Because having such data can 
                    <a href="http://www.nytimes.com/2013/02/17/technology/if-youre-collecting-our-data-you-ought-to-protect-it.html?_r=1&">get you into trouble</a>.
                </p>
                <p>
                    Because privacy is a feature you can sell.  If you had the choice between using an app where your data was exposed, and an app that guaranteed your privacy, which would you chose?
                </p>
                <p>
                    Because withholding privacy allows new competitors 
                    to gain a market toehold and become entrenched.
                    For example, if a competitor to Evernote emerged tomorrow 
                    and offered a subset of functionality but true privacy, 
                    some portion of the market would chose that competitor over Evernote.
                </p>
                <p>
                    No matter how many additional innovations Evernote added, 
                    some portion of the market would continue to chose the private solution.  
                    This allows the competitor a guaranteed customer base and revenue stream, 
                    allowing it become progressively more competitive over time.
                </p>
                <p>
                    Companies offering a freemium product should be especially 
                    concerned about this last point.  
                    In the above example, end users are likely to chose the free Evernote 
                    for their less sensitive and public stuff 
                    while paying the competitor to protect their most important notes!
                </p>
            </div>
        </div>
    </div>

    <div class="quest">
        <h1>Who are the people behind Crypton?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/team.jpg" alt="The SpiderOak Team" />
            </div>
            <div class="qtext">
                <p>
                    In 2007 we launched <a href="https://spideroak.com">SpiderOak</a>, 
                    the first ever online backup and file sync product 
                    with meaningful end user privacy assurance through built in encryption.  
                    Since then a variety of excellent companies have followed us into this market.
                </p>
                <p>
                    Now consumers demand more than just file storage and file sharing.
                </p>
                <p>
                    We anticipate zero knowledge apps 
                    with rich collaboration features that allow data coordination 
                    and sharing between organically forming and organizing groups.  
                    It's not just about files and folders anymore, but about 
                    rich structured user data for a variety of domain specific purposes.
                </p>
                <p>
                    We love using and building cloud applications, 
                    and we'd prefer not to to wait another 5 years for awareness to increase 
                    and meaningful privacy to be a standard feature in cloud apps.
                </p>
                <p>
                    We're making this framework available to everyone, 
                    building our own next generation of apps on top of it, 
                    and looking forward to the rich ecosystem of 
                    privacy preserving cloud apps to come.
                </p>
            </div>
        </div>
    </div>

    <div class="quest">
        <h1>Is Crypton Horizontally Scalable for a very large, high performance site with hundreds of millions of users?</h1>
        <div class="qbod">
            <div class="qside">
            </div>
            <div class="qtext">
                <p>
                    Yes, and more easily than a site built with traditional approaches 
                    to data storage such as a relational database.
                </p>
                <p>
                    The backend data structures are designed for sharding 
                    as a site grows beyond the capabilities of a single cluster 
                    of database servers.  
                    This means the process of building a very large Crypton app server 
                    isn't about "scaling it to support 100 million users."  
                    It's more like: "scale it to support 1 million users," 
                    and then repeat that 100 times.  
                    Scaling out rather than up&mdash;a far easier challenge.
                </p>
                <p>
                    The nature of client side rather than server side intelligence 
                    naturally means that the server never has to perform joins between 
                    containers.  
                    The server infrastructure gets out of the business of doing 
                    calculations on data.  
                    Its job is just to reliably store and retrieve data while enforcing 
                    quotas, access policies, and protocols.
                </p>
            </div>
        </div>
    </div>

    <div class="quest">
        <h1>How do the challenges of developing a Crypton powered app 
    compare to a similar app that did not preserve end user privacy?</h1>
        <div class="qbod">
            <div class="qside">
            </div>
            <div class="qtext">
                <p>
                    Crypton can be used in conjunction with familiar approaches to application
                    development such as Ruby on Rails, Python and Django, or PHP, Objective C,
                    or Java.  
                    Since the server cannot read the data, the
                    data processing intelligence is client side.
                    For a browser based application, much of the logic would 
                    be written in Javascript.  
                </p>

                <p>
                    The big structural difference is how private user generated data is stored.
                    In a conventional application, you typically pass that information to the
                    server so it can be stored in a relational database.  
                    With Crypton, the private data is stored in an Object Database provided by
                    the framework.
                    Changes to the objects in the database are encrypted before being sent to
                    the server.  The object database approach is convenient for quickly
                    building rich client side applications, because you store the objects
                    directly in their original form.
                </p>

                <p>
                    We intend that Crypton will enable developers to build against Crypton
                    much like a developer would build against any conventional object database.
                    Such databases have been in existence since the early 1990's,
                    and their operation is well documented and understood these days.
                    Instead of having to worry about low-level implementation details,
                    the developer targets Crypton as they would target another database technology.
                </p>

                <p>
                    Crypton's object database implementation is inspired by 
                    <a href="http://en.wikipedia.org/wiki/Zope_Object_Database">ZODB</a>.
                    As Crypton progresses, the object database will gain advanced features, 
                    such as object relationship validation, 
                    automatically derived index objects,
                    and triggers.
                </p>

                <p>
                    Another topic is the added challenge of debugging.  
                    Server operators can't just "look into an account" to see what's going wrong 
                    in an application when an end user reports some problem.
                    Instead they have to try to reproduce the problem independently,
                    ask the user share the relevant data with the operators, 
                    or build a diagnostic reporting capabilities into the application itself.
                    This sort of problem solving takes some adjustment.  Such circumstances
                    further increase the value of development methodologies for finding bugs
                    before code reaches production.
                </p>
            </div>
        </div>
    </div>

    <div class="quest">
        <h1>How is Crypton's reference implementation built?</h1>
        <div class="qbod">
            <div class="qside">
            </div>
            <div class="qtext">
                <p>
                    Crypton's reference implementation uses 
                    <a href="http://nodejs.org/">Nodejs</a>, 
                    <a href="http://redis.io/">Redis</a>
                    and <a href="http://postgresql.org/">PostgreSQL</a> 
                    on the backend.
                    The client is Javascript suitable for browser environment or app packaging.
                </p>
                <p>
                    We'll soon make additional reference implementations of the client in
                    Python and C.  
                    The backend will evolve to a more sophisticated stack
                    involving multiple languages and pluggable storage technologies.
                </p>
            </div>
        </div>
    </div>

    <div class="quest">
        <h1>What code review and auditing has the cryptography 
            in Crypton's specification and implementations received?  
            How will this continue moving forward?</h1>
        <div class="qbod">
            <div class="qside">
            </div>
            <div class="qtext">
                <p>
                    Crypto code is isolated into particular designated modules.  
                    <a href="https://spideroak.com">SpiderOak</a> senior engineers will do review of all changes to
                    those modules before each major and minor release beyond v0.1.0.
                    (We're currently at version 0.0.1 and so no such review has yet happened,
                    but see below for the development timeline and other details.)
                </p>
                <p>
                    Additionally, <a href="https://spideroak.com">SpiderOak</a> will purchase expert code review 
                    from outside security specialists before each major release 
                    that involves changes to the crypto code.  
                    The crypto portions of the code won't typically change between 
                    minor versions.
                </p>
                <p>
                    This is sustainable.  
                    Over time, the majority of the framework's code base 
                    won't be the crypto code itself, 
                    but rather object database features 
                    and other higher level functionality built on top of the 
                    crypto storage layer.
                </p>
                <p>
                    Design spec for all of the crypto functionality needed by Crypton 
                    was completed before any development started.  
                    We expect feature creep to only very rarely extend the crypto requirements.
                </p>
            </div>
        </div>
    </div>


 
    <div class="quest">
        <h1>What testing, code quality and development guidelines are in place to make the code accessible to reviewers and bug hunters?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/tools.jpg" alt="Mechanic's toolbox" />
            </div>
            <div class="qtext">
                <p>
                    Building software involves bugs, and bugs in crypto code are often fatal.
                    Research has shown that a variety of quality control tools are effective 
                    at finding different types of bugs, and consequently the combination of 
                    several techniques is most likely to lead to reliable software.  
                    Among these, human code review is the most important.
                </p>

                <p>
                    Crypton is written with human review and testability in mind.  
                    This means consistent style, simple single purpose functions, 
                    clear code separation, avoiding unnecessary coupling, 
                    meaningful function and variable names, 
                    and careful code organization.  
                    Data structures are designed and specified independently of the code.
                </p>

                <p>
                    Additionally, Crypton will use all of the following:
                </p>

                <ul>
                  <li>Static Analysis</li>
                  <li>Style Guide</li> 
                  <li>Code Complexity Controls</li>
                  <li>Unit Tests</li>
                  <li>Integration Tests</li>
                  <li>Continuous Integration</li>
                  <li>Code Review</li>
                  <li>Careful QA Testing by high entropy humans</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>What software license(s) is the Crypton implementation available under?</h1>
        <div class="qbod">
            <div class="qside"></div>
            <div class="qtext">
                <p>
                    A client SDK will be available under a free commercial
                    license.  This is suitable for including <a
                    href="https://spideroak.com">SpiderOak</a> hosted
                    Crypton.IO storage options within another application.
                    This is similar to using the Dropbox API to store data
                    within end users' Dropbox accounts.  
                </p>

                <p>
                    There are additional options if you want to build a zero knowledge
                    application that is entirely self hosted.  In other words, it does not have
                    any dependency on users having <a href="https://spideroak.com">SpiderOak.com</a> accounts.  Rather, you want to
                    operate the server side components of Crypton yourself, letting clients
                    connect to your own infrastructure.
                </p>

                <p>
                    For this, there are two choices.  If your online service is also free and
                    open source software like Crypton itself, then you may freely make use
                    of full Crypton code base including all client and server components
                    under the terms of the AGPL.  If making your product free and open source
                    software is unpalatable, you may instead purchase a commercial license from
                    SpiderOak.
                </p>

                <p>
                    Many people will say we should make Crypton available under a more liberal
                    license than AGPLv3.
                    Essentially, these people ask for the freedom to build closed source
                    commercial online services with Crypton without contributing their own
                    improvements back to the community, 
                    without giving credit to the community's efforts, 
                    and without financially supporting the
                    cost of ongoing maintenance, development, and security review of Crypton.
                </p>

                <p>
                    Such uses are more appropriate under a commercial license.  
                    Early adopters may receive complimentary commercial licenses.  
                    Contact us.  
                    We have a history of making reasonable arrangements for startups.
                </p>

                <p>We also enjoy Zed Shaw's 
                    <a href="http://zedshaw.com/essays/why_i_gpl.html">explanation of why he choses GPL</a>,
                    the forth reason in particular.
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>How far along is the reference implementation in the development cycle?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/bells.jpg" alt="Literally bells and whistles" />
            </div>
            <div class="qtext">
                <p>
                    On 25 February 2013 we're releasing v0.0.1.
                    That is a proof of the core concepts.  
                    It includes the complete specification 
                    for all anticipated crypto functionality and core data structures. 
                </p>

                <p>
                    The implementation of the object database is naive
                    with the simplest possible diff/patch implementation for updates.
                    BLOB storage is not space efficient.  
                    Automatic detection of changed objects is CPU and memory intensive.
                </p>

                <p>
                    New account key generation is particularly slow, 
                    and several other places need performance tuning.
                </p>

                <p>
                    Most importantly, it has not been through a first round of refactoring, 
                    general code cleanup, and security review.  It does not have comprehensive test
                    coverage.
                </p>

                <p>
                    All of these things will change in the versions between v0.0.1 and v0.1.0, 
                    at which point we'll make a first stable release 
                    that we encourage for production and commercial uses.
                </p>


                <h2>What additional capabilities and enhancements will be added as the project grows?</h2>
                <h3>Client</h3>
                <ul>
                    <li>
                        Client: Object DB: More efficient storage of BLOBs for easier storing of music, pictures, video, etc.
                    </li>
                    <li>
                        Client: Object DB: Improved diff and patch implementations 
                        for container saves, loads, and refreshes/updates.
                    </li>
                    <li>Client: Object DB: transparent and opportunistic compression</li>
                    <li>Client: Object DB: Pluggable User Created Adapters and Differs of more complex data structures, allowing faster container refresh and smaller data storage.</li>
                    <li>Client: Object DB: More Standard Adapters and Differs</li>
                    <li>Client: Object DB: Container Triggers: Automatically run code on every save.  For example, automatically maintain a searchable index by keyword in separate container(s)</li>
                    <li>Client: Object DB: Container Compaction</li>
                    <li>Client: Object DB: More aggressive container caching for faster application load times and interactivity.</li>
                    <li>Client: Object DB: Specialized containers that implement more efficient maps for strings and large integers.</li>
                    <li>Client: Native browser plugins for the slow and sensitive crypto ops</li>
                    <li>Client: Reference implementations in other languages such as Python, Objective C, and Java.</li>
                </ul>
                <h4>Backend</h4>
                <ul>
                  <li>Backend: Application level data partitioning</li>
                  <li>Websocket and long polling support, for real time notifications for changes</li>
                  <li>Backend: Faster implementation of real time transient messaging</li>
                  <li>Backend: Support for pluggable external binary storage: 
                      Nimbus.io, Amazon S3, filesystem, etc.</li>
                </ul>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>How can I participate in the development of the framework itself?</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/cart.jpg" alt="Conscientious shopping cart" />
            </div>
            <div class="qtext">
                <p>
                    Check out the code from our <a href="https://github.com/SpiderOak/crypton">GitHub repository!</a>
                    This is where we are keeping our wiki and issue tracker for the project, 
                    along with the JavaScript reference implementation.
                </p>
                <h2>Is there a forum or something for developers building applications with the framework?</h2>
                <p>
                    We are providing a mailing list for now, and will also likely provide forums in the future.
                </p>
                <h2>I'm not a developer but this is cool. How can I help?</h2>
                <ul>
                    <li>
                        Become a 
                        <a href="https://spideroak.com/blog/20121121085239-looking-for-a-few-good-ambassadors">Zero Knowledge Privacy Ambassador</a>!
                    </li>
                    <li>
                        Vote with your wallet and purchase from companies 
                        that provide a product with meaningful privacy built in.
                    </li>
                    <li>
                        Contact the creators of the software products you use, 
                        and make it clear you would appreciate them including privacy features
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>What are some other examples of other relevant crypto projects?</h1>
        <div class="qbod">
            <div class="qside">
            </div>
            <div class="qtext">
                <p>
                    <ul>
                      <li><a href="https://silentcircle.com/">Silent Circle</a></li>
                      <li><a href="http://aes.io/">AES.io</a></li>
                      <li><a href="http://mega.co.nz/">MEGA</a></li>
                      <li><a href="https://crypto.cat/">Cryptocat</a></li>
                      <li><a href="https://spideroak.com/">SpiderOak</a> (That's us!)</li>
                    </ul>
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>What commercial products are implemented with Crypton?</h1>
        <div class="qbod">
            <div class="qside"></div>
            <div class="qtext">
                <p>
                    Hopefully none yet, since we haven't released a security reviewed 
                    v0.1.0 version of the framework, but that will happen soon.
                    We'll be sure to showcase Crypton products here.
                    We're naturally building our own apps with it too!
                </p>
            </div>
        </div>
    </div>
  
    <div class="quest">
        <h1>Should this be happening at all?  Isn't this a bad idea, fraught with peril?  Crypto code is hard and Javascript Crypto is doomed!</h1>
        <div class="qbod">
            <div class="qside">
                <img src="images/collab.jpg" alt="A lab full of scientists in various emotional stages" />
            </div>
            <div class="qtext">
                <p>
                    Building Crypto code is indeed 
                    <a href="http://chargen.matasano.com/chargen/2009/7/22/if-youre-typing-the-letters-a-e-s-into-your-code-youre-doing.html">famously hard</a>.
                    We have some experience with cryptography, and most importantly 
                    we have an understanding that it needs auditing and verification by experts, 
                    and a development process that lends itself to this review.
                </p>

                <p>
                    It's better that the hard crypto code happens here 
                    in a centralized and general purpose application framework 
                    as an open source project where we can all work together.
                    The alternative is requiring developers to either write their own crypto code,
                    or just avoid building applications 
                    with meaningful end user privacy assurance.
                </p>

                <p>
                    When building an application with Crypton, the cryptography is entirely 
                    encapsulated and hidden.  
                    You're just using a simple interface to data storage.
                </p>

                <p>
                    There are additional
                    <a href="http://www.matasano.com/articles/javascript-cryptography/">
                        concerns
                    </a>
                    and
                    <a href="http://log.nadim.cc/?p=33">
                        arguments
                    </a>
                    about "Browser based" crypto.  
                </p>

                <p>
                    First, we need to be clear that Javascript and "browser based" 
                    are not always the same thing.  
                    Javascript code might be a HTML5 mobile app running on Android, 
                    or a Node.js based desktop app created with something like 
                    <a href="http://appjs.org/">AppJS</a>.
                    Each of these scenarios are ideal environments for deploying Crypton 
                    applications and sidestep the objections to the browser environment.
                </p>

                <p>
                    For browser based applications there are some mitigations available.
                    Chrome and Safari include a 
                    <a href="https://developer.mozilla.org/en-US/docs/DOM/window.crypto.getRandomValues">native secure random number generator</a>.
                    Mozilla is 
                    <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=440046">
                    shipping it in Firefox 21</a>.
                    We'll do what we can to avoid data exposure through side channels, 
                    such as using web workers where possible to avoid leaking timing 
                    information into the event loop.
                </p>

                <p>
                    Finally, remember the threat model we're protecting against.  
                    Specifically we're protecting the service operators from the dangers 
                    of having readable database of end user data.  
                    Simultaneously, we're protecting the end user from a service provider 
                    amassing a collection of the user's history and data.
                    Most of the arguments against browser based crypto 
                    don't directly apply to these goals.
                </p>
            </div>
        </div>
    </div>
    <div class="quest">
        <h1>ZOMG I've found a serious bug with security implications!!!one!!  
            What are the security contact procedures?
        </h1>
        <div class="qbod">
            <div class="qside"></div>
            <div class="qtext">
                <p>
                    Congrats and nice work!  
                    Until we hit the v0.1.0 release milestone, 
                    just post it to GitHub as an issue like any other bug.
                </p>

                <p>
                    When we release v0.1.0 we'll also create security contact procedures: 
                    a GPG key, a core security team, guaranteed response times, etc.  
                    We'll also be doing our own internal review before releasing v0.1.0.
                </p>
            </div>
        </div>
    </div>
