<%
  title="Crypton.io | Docs & Examples"
  currentBody="body-docs"
  selected=""
%>

<div class="wrapper no-bg">
  <div class="container">
    <div class="row">
      <div class="box left col1 block">
      <h2 class="dark left col1">Accounts</h2>
      <p>Each user of a Crypton app must have an account.</p>
      <p><strong>crypton.generateAccount(username, passPhrase, callback, options)</strong></p>
      <p>This method will generate an account object with salts and keys.</p>
      <p>The <code>callback</code> function is called upon completion, passing potentially null error and account arguments.</p>
      <p>
        <code>options</code> is an optional object. Currently its only used property is <code>save</code> which defaults to
        <code>true</code> and toggles an automatic <code>account.save()</code>.
      </p>
      <pre class="examples"><code data-language="javascript">var username = 'inputFromUser';
var passPhrase = 'moreInputFromUser';

crypton.generateAccount(username, passPhrase, done, {
  save: false
});</code></pre>
      <p><strong>account.save(callback)</strong></p>
      <p>Sends account object to the server for storage, either updating or creating the record. After saving the account (successfully or otherwise) it is still necessary to authenticate with the server.</p>
      <pre class="examples"><code data-language="javascript">function done (err, account) {
  if (err) {
    // alert the user, adjust application flow
    alert(err);
    return;
  }

  account.save(function (err) {
    if (err) {
      alert(err);
      return;
    }

    // now authenticate with username and passPhrase
  });
});</code></pre>
    </div>
    </div>
  <a name="sessions" class="anchor"></a>
  <div class="row">
  <div class="box left col1 block">
      <h2 class="dark left">Sessions</h2>
      <p>A session is necessary for requesting and receiving data. </p>
      <p><strong>crypton.authorize(username, passPhrase, callback)</strong></p>
      <p>Requests a challenge from the server for the given <code>username</code> and responds to it using the given <code>passPhrase</code>.
            <pre class="examples"><code data-language="javascript">crypton.authorize(username, passPhrase, function (err, session) {
  if (err) {
    // likely an incorrect passPhrase
    alert(err);
    return;
  }

  window.session = session;
  // continue application logic
});</code></pre>
      <p><strong>session.serialize()</strong></p>
      <p>Serialize a session for storage.</p>
      <pre class="examples"><code data-language="javascript">var serializedSession = session.serialize();
console.log(serializedSession);</code></pre>

      <p><strong>session.load(containerName, callback)</strong></p>
      <p>Loads a <a href="/docs/containers">container</a>.</p>
      <p><strong>session.create(containerName, callback)</strong></p>
      <p>Attempts to create a <a href="/docs/containers">container</a>.</p>
  </div>
</div>
</div>
</div>

